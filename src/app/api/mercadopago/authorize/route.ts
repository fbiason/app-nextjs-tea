import api from "@/api";
import { NextResponse } from "next/server";
import { logger } from "@/lib/logger";

/**
 * Endpoint para obtener la URL de autorizaci√≥n de MercadoPago
 * Esta ruta genera una URL a la que el beneficiario debe acceder para
 * aceptar los t√©rminos y condiciones de MercadoPago y autorizar la integraci√≥n
 */
export async function GET() {
  logger.info('MP_AUTHORIZE', 'üîê Generando URL de autorizaci√≥n de MercadoPago');
  
  try {
    // Verificamos que las variables de entorno est√©n configuradas
    if (!process.env.NEXT_PUBLIC_MP_CLIENT_ID) {
      logger.critical('MP_AUTHORIZE', '‚ùå Variable de entorno NEXT_PUBLIC_MP_CLIENT_ID no configurada');
      return NextResponse.json({ 
        success: false, 
        error: "Client ID de MercadoPago no configurado" 
      }, { status: 500 });
    }
    
    if (!process.env.APP_URL) {
      logger.critical('MP_AUTHORIZE', '‚ùå Variable de entorno APP_URL no configurada');
      return NextResponse.json({ 
        success: false, 
        error: "URL de la aplicaci√≥n no configurada" 
      }, { status: 500 });
    }
    
    // Log de par√°metros para debugging
    logger.debug('MP_AUTHORIZE', 'Par√°metros de autorizaci√≥n', {
      client_id: process.env.NEXT_PUBLIC_MP_CLIENT_ID,
      redirect_uri: `${process.env.APP_URL}/api/mercadopago/connect`
    });
    
    // Obtenemos la URL de autorizaci√≥n de MercadoPago
    logger.info('MP_AUTHORIZE', 'üîç Solicitando URL de autorizaci√≥n a MercadoPago...');
    const authorizationUrl = await api.mercadopago.authorize();
    
    // Log de √©xito
    logger.info('MP_AUTHORIZE', '‚úÖ URL de autorizaci√≥n generada correctamente');
    logger.debug('MP_AUTHORIZE', 'URL de autorizaci√≥n', { url: authorizationUrl });
    
    // Devolvemos la URL de autorizaci√≥n
    return NextResponse.json({
      success: true,
      url: authorizationUrl
    });
  } catch (error) {
    // Log detallado del error
    logger.logError('MP_AUTHORIZE', error, true);
    
    const errorMessage = error instanceof Error ? error.message : "Error desconocido";
    logger.critical('MP_AUTHORIZE', `‚ùå Error al obtener la URL de autorizaci√≥n: ${errorMessage}`);
    
    // Devolvemos un error
    return NextResponse.json(
      { 
        success: false, 
        error: errorMessage
      },
      { status: 500 }
    );
  }
}
